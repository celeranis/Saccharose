<div role="tabpanel">
  <section class="card">
    <h2>Reminder Dialogue Generator</h2>
    <div class="content form-box">
      <p class="spacer10-bottom">Some open-world dialogue are <code>DialogExcelConfigData</code>'s and some are <code>ReminderExcelConfigData</code>'s. We don't have any data
      that can correlate a reminder to a quest, so some open-world dialogue may not show up in the quest dialogue generator. In which case you can try search for it here
      to generate a reminder dialogue branch.</p>
      <div class="field valign">
        <input class="reminder-generate-input grow" type="text" placeholder="Enter reminder line or part of a reminder line to start from." />
      </div>
      <fieldset class="spacer10">
        <legend>Number of reminder branches to fetch by subsequent ID</legend>
        <div class="content" style="padding-top:0;">
          <p class="spacer10-bottom">Some reminders have a <code>NextReminderId</code>, in which those will be fetched for reminder found. A reminder and all of its next reminders
            are a single "Reminder Branch".
          In the input below, you can specify a certain amount of additional reminder branches to fetch after the reminder branch that was found. It does this by simply
          incrementing the ID of the last reminder of the previous branch by 1. There is no guarantee that these subsequent reminders will have any correlation to what you're looking for.</p>
          <div class="valign">
            <input class="reminder-subseq-input grow" type="number" placeholder="0" />
          </div>
        </div>
      </fieldset>
      <div class="field valign spacer10-top">
        <button class="reminder-generate-submit primary primary--2">Generate</button>
        <div class="reminder-generate-submit-pending hide loading small spacer5-left"></div>
      </div>
    </div>
  </section>
  <div id="reminder-generate-result"></div>
</div>

<script nonce="<%= req.context.nonce %>">
waitForConstant('app', app => {
  const listeners = [
    {
      el: '.reminder-generate-input',
      ev: 'enter',
      fn: function(event, target) {
        document.querySelector('.reminder-generate-submit').click();
      }
    },
    {
      el: '.reminder-generate-submit',
      ev: 'click',
      fn: function(event, target) {
        let inputEl = document.querySelector('.reminder-generate-input');
        let subseqEl = document.querySelector('.reminder-subseq-input');
        let loadingEl = document.querySelector('.reminder-generate-submit-pending');
        let text = inputEl.value.trim();
        let subseq = parseInt(subseqEl.value || '0');

        if (!text) {
          app.flashTippy(inputEl, {content: 'Enter something in first!', delay:[0,2000]});
          return;
        }

        if (text.length < 5) {
          app.flashTippy(inputEl, {content: 'Enter at least 5 characters.', delay:[0,2000]});
          return;
        }

        loadingEl.classList.remove('hide');
        inputEl.disabled = true;
        target.disabled = true;

        app.endpoints.generateReminderDialogue(text, subseq, true).then(result => {
          if (typeof result === 'string') {
            document.querySelector('#reminder-generate-result').innerHTML = result;
          } else if (typeof result === 'object' && result.error_description) {
            document.querySelector('#reminder-generate-result').innerHTML = '<p>'+esc(result.error_description)+'</p>';
          }
          autosize(document.querySelectorAll('.dialogue-container textarea'));
        }).finally(() => {
          loadingEl.classList.add('hide');
          inputEl.disabled = false;
          target.disabled = false;
        });
      }
    },
  ];

  app.startListeners(listeners);
});
</script>
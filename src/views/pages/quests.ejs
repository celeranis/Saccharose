<section class="card">
  <h2>Find Quest</h2>
  <div class="content">
    <p class="spacer10-bottom">Quest name must be an exact match, case sensitive. Leading/trailing spaces will be trimmed.</p>
    <div class="field valign">
      <div class="valign grow" style="max-width:500px">
        <input class="quest-search-input grow" type="text" placeholder="Enter quest name" />
        <button class="quest-search-submit primary primary--2 spacer5-left">Search</button>
      </div>
      <div class="quest-search-submit-pending hide loading small spacer5-left"></div>
    </div>
  </div>
  <div class="content quest-search-result-wrapper hide">
    <h4>Search Results</h4>
    <div class="quest-search-result"></div>
  </div>
</section>
<div id="quest-generate-result"></div>

<script nonce="<%= req.context.nonce %>">
waitForConstant('app', app => {
  function loadQuestGenerateResult() {
    document.querySelector('.quest-search-result-wrapper').classList.add('hide');

    let urlParts = /\/quests\/(\d+)/.exec(window.location.href);
    if (!urlParts || urlParts.length < 2) {
      return;
    }

    document.querySelector('#quest-generate-result').innerHTML = `
    <div class="valign spacer10-left">
      <span class="loading"></span>
      <span class="spacer10-left fontWeight600">Loading quest...</span>
    </div>`

    let id = urlParts[1];
    app.endpoints.generateMainQuest(id, true).then(html => {
      document.querySelector('#quest-generate-result').innerHTML = html;
      autosize(document.querySelectorAll('.dialogue-container textarea'));
    });
  }

  const listeners = [
    {
        ev: 'readyAsync',
        fn: function() {
          waitForConstant('axios', () => {
            loadQuestGenerateResult();
          })
        }
    },
    {
      el: '.quest-search-input',
      ev: 'enter',
      fn: function(event, target) {
        document.querySelector('.quest-search-submit').click();
      }
    },
    {
      el: '.quest-search-submit',
      ev: 'click',
      fn: function(event, target) {
        let inputEl = document.querySelector('.quest-search-input');
        let loadingEl = document.querySelector('.quest-search-submit-pending');
        let text = inputEl.value.trim();

        if (!text) {
          app.flashTippy(inputEl, {content: 'Enter a quest name first!', delay:[0,2000]});
          return;
        }

        loadingEl.classList.remove('hide');
        inputEl.disabled = true;
        target.disabled = true;

        app.endpoints.findMainQuest(text, true).then(result => {
          document.querySelector('.quest-search-result-wrapper').classList.remove('hide');
          document.querySelector('.quest-search-result').innerHTML = result;
          inputEl.value = '';

          app.startListeners([
            {
              el: '.quest-search-result',
              ev: 'click',
              fn: function(event) {
                event.stopPropagation();
                event.preventDefault();
                window.history.pushState({}, null, event.target.href);
                loadQuestGenerateResult();
              }
            }
          ], document.querySelector('.quest-search-result'));
        }).finally(() => {
          loadingEl.classList.add('hide');
          inputEl.disabled = false;
          target.disabled = false;
        });
      }
    },
  ];

  app.startListeners(listeners);
});
</script>
<!--
<div class="tab-list" role="tablist">
  <button role="tab" id="dialogueTab" class="tab-button <%= tab === 'dialogue' ? 'active' : '' %>"
    ui-trigger="tab:dialogue" ui-set-query-param="tab=dialogue">Dialogue</button>

    <button role="tab" id="reverseTab" class="tab-button <%= tab === 'reverse' ? 'active' : '' %>"
      ui-trigger="tab:reverse" ui-set-query-param="tab=reverse">Reverse Find</button>
</div>
-->
<div role="tabpanel" aria-labelledby="dialogueTab" class="tab <%= tab === 'dialogue' ? 'active' : 'hide' %>" ui-target="tab:dialogue">
  <section class="card">
    <h2>Find Quest</h2>
    <div class="content">
      <p class="spacer10-bottom">Search for a quest by its full name or keywords. You can also enter a specific quest ID.</p>
      <div class="field valign">
        <div class="valign grow" style="max-width:500px">
          <input class="quest-search-input grow" type="text" placeholder="Enter quest name" />
          <button class="quest-search-submit primary primary--2 spacer5-left">Search</button>
        </div>
        <div class="quest-search-submit-pending hide loading small spacer5-left"></div>
      </div>
    </div>
    <div class="content quest-search-result-wrapper hide">
      <h4>Search Results</h4>
      <div class="quest-search-result"></div>
    </div>
  </section>
  <div id="quest-generate-result"></div>
</div>
<div role="tabpanel" aria-labelledby="reverseTab" class="tab <%= tab === 'reverse' ? 'active' : 'hide' %>" ui-target="tab:reverse">
  <section class="card">
    <h2>Find Quest</h2>
    <p>Blah</p>
  </section>
</div>

<script nonce="<%= req.context.nonce %>">
waitForConstant('app', app => {
  function loadQuestGenerateResult() {
    document.querySelector('.quest-search-result-wrapper').classList.add('hide');

    let urlParts = /\/quests\/(\d+)/.exec(window.location.href);
    if (!urlParts || urlParts.length < 2) {
      return;
    }

    document.querySelector('#quest-generate-result').innerHTML = `
    <div class="valign spacer10-left">
      <span class="loading"></span>
      <span class="spacer10-left fontWeight600">Loading quest...</span>
    </div>`

    let id = urlParts[1];
    app.endpoints.generateMainQuest(id, true).then(html => {
      document.querySelector('#quest-generate-result').innerHTML = html;
      autosize(document.querySelectorAll('.dialogue-container textarea'));
      autosize(document.querySelectorAll('textarea.autosize'));

      app.startListeners(questResultListeners, document.querySelector('#quest-generate-result'));
    });
  }

  const questResultListeners = [
    {
      el: '.help-info',
      ev: 'click',
      multiple: true,
      fn: function(event, target) {
        app.dialog.open(`<h2>Notes</h2>
        <ul class="padding">
          <li>The order of dialogue sections is not guaranteed to be in the correct chronological order nor are the "Section Order" parameters reliable.
            The "Quest Step" parameters listed under sections don't always match up either. But the dialogue within a textbox is guaranteed to be in the right order.
          </li>
          <li>You may sometimes notice seemingly duplicate dialogue sections. These dialogue sections may have slight differences depending on player's completion of
            other quests/objectives.
          </li>
          <li>You may sometimes notice dialogue sections that start with a dialogue option. These are sometimes for conditional dialogue options.
            You may have to adjust the dialogue depth (number of <code>:</code>'s at the start of a dialogue line) manually sometimes.
          </li>
          <li>The tool cannot distinguish between player dialogue options and Traveler spoken lines. For most quests you don't have to worry about this,
            but some quests like Archon Quests and Flagship Event Quests may have Traveler spoken lines.
          </li>
        </ul>
        <div class="buttons spacer-top">
          <button class="primary AppDialog_CloseTrigger">Dismiss</button>
        </div>`, app.DIALOG_MODAL, {
          dialog_style: 'max-width:800px;margin-top:90px'
        });
      }
    },
  ];

  const listeners = [
    {
        ev: 'readyAsync',
        fn: function() {
          waitForConstant('axios', () => {
            loadQuestGenerateResult();
          })
        }
    },
    {
      el: '.quest-search-input',
      ev: 'enter',
      fn: function(event, target) {
        document.querySelector('.quest-search-submit').click();
      }
    },
    {
      el: '.quest-search-submit',
      ev: 'click',
      fn: function(event, target) {
        let inputEl = document.querySelector('.quest-search-input');
        let loadingEl = document.querySelector('.quest-search-submit-pending');
        let text = inputEl.value.trim();

        if (!text) {
          app.flashTippy(inputEl, {content: 'Enter a quest name first!', delay:[0,2000]});
          return;
        }

        loadingEl.classList.remove('hide');
        inputEl.disabled = true;
        target.disabled = true;

        app.endpoints.findMainQuest(text, true).then(result => {
          document.querySelector('.quest-search-result-wrapper').classList.remove('hide');
          document.querySelector('.quest-search-result').innerHTML = result;

          app.startListeners([
            {
              el: '.quest-search-result',
              ev: 'click',
              fn: function(event) {
                console.log('Search result clicked', event);

                let target = event.target.tagName.toLowerCase() === 'a' ? event.target : event.target.closest('a');
                let href = target.href;

                if (event.ctrlKey) {
                  return; // allow default behavior if ctrl-click
                }

                event.stopPropagation();
                event.preventDefault();
                console.log('Changing url to', href);
                window.history.pushState({}, null, href);
                loadQuestGenerateResult();
              }
            },
          ], document.querySelector('.quest-search-result'));
        }).finally(() => {
          loadingEl.classList.add('hide');
          inputEl.disabled = false;
          target.disabled = false;
        });
      }
    },
  ];

  app.startListeners(listeners);
});
</script>
<div role="tabpanel">
  <section class="card">
    <h2>Single Branch Dialogue Generator</h2>
    <div class="content">
      <p class="spacer10-bottom">Generate dialogue after a specific line within a single dialogue section. You can also enter a specific Talk ID or Dialogue ID.</p>
      <div class="field valign">
        <div class="valign grow" style="max-width:700px">
          <input class="dialogue-generate-input grow" type="text" placeholder="Enter dialogue line or part of a dialogue line." style="border-top-right-radius:0;border-bottom-right-radius:0;" />
          <div class="posRel">
            <input class="npc-filter-input" type="text" placeholder="NPC Filter (optional)" style="border-top-left-radius:0;border-bottom-left-radius:0;border-left:0;" />
            <span ui-tippy="{allowHTML: true, content: 'Filter by the speaker of the dialogue line to further narrow down the results (e.g. &quot;Paimon&quot;).<br><br>Enter in &quot;Player&quot; or &quot;Traveler&quot; for player lines/options.<br><br>This input is case insensitive and optional.',delay:[200, 100]}"
                  class="dispInlineBlock" style="height:18px;width:18px;position:absolute;right:5px;top:0;bottom:0;margin:auto 0;">
                  <%- icon('info',{width: 18, height:18}) %>
            </span>
          </div>
          <button class="dialogue-generate-submit primary primary--2 spacer5-left">Generate</button>
        </div>
        <div class="dialogue-generate-submit-pending hide loading small spacer5-left"></div>
      </div>
    </div>
  </section>
  <div id="dialogue-generate-result"></div>
</div>

<script nonce="<%= req.context.nonce %>">
waitForConstant('app', app => {
  function loadResultFromURL() {
    const url = new URL(window.location.href);
    const query = url.searchParams.get('q');
    const npc = url.searchParams.get('npc');
    window.history.replaceState({q: query, npc: npc}, null, window.location.href);
    if (npc) {
      document.querySelector('.npc-filter-input').value = npc;
    } else {
      document.querySelector('.npc-filter-input').value = '';
    }
    if (query) {
      document.querySelector('.dialogue-generate-input').value = query;
      generateResult(true);
    } else {
      document.querySelector('.dialogue-generate-input').value = '';
    }
  }

  function loadResultFromState(state) {
    if (!state)
      state = {};
    document.querySelector('.dialogue-generate-input').value = state.q || '';
    document.querySelector('.npc-filter-input').value = state.npc || '';
    if (state.q) {
      generateResult(true);
    } else {
      document.querySelector('#dialogue-generate-result').innerHTML = '';
    }
  }

  function generateResult(isNonUserAction = false) {
    let inputEl = document.querySelector('.dialogue-generate-input');
    let npcFilterEl = document.querySelector('.npc-filter-input');
    let loadingEl = document.querySelector('.dialogue-generate-submit-pending');
    let buttonEl = document.querySelector('.dialogue-generate-submit');
    let text = inputEl.value.trim();
    let npcFilter = npcFilterEl.value.trim();

    if (!text) {
      app.flashTippy(inputEl, {content: 'Enter something in first!', delay:[0,2000]});
      return;
    }

    if (text.length < 5) {
      app.flashTippy(inputEl, {content: 'Enter at least 5 characters.', delay:[0,2000]});
      return;
    }

    loadingEl.classList.remove('hide');
    inputEl.disabled = true;
    buttonEl.disabled = true;

    const url = new URL(window.location.href);
    url.searchParams.set('q', text);
    if (!npcFilter) {
      if (url.searchParams.has('npc')) {
        url.searchParams.delete('npc');
      }
    } else {
      url.searchParams.set('npc', npcFilter);
    }
    if (isNonUserAction) {
      window.history.replaceState({q: text, npc: npcFilter}, null, url.href);
    } else {
      window.history.pushState({q: text, npc: npcFilter}, null, url.href);
    }

    app.endpoints.generateSingleDialogueBranch(text, npcFilter, true).then(result => {
      if (typeof result === 'string') {
        document.querySelector('#dialogue-generate-result').innerHTML = result;
      } else if (typeof result === 'object' && result.error_description) {
        document.querySelector('#dialogue-generate-result').innerHTML = '<p>'+esc(result.error_description)+'</p>';
      }
      autosize(document.querySelectorAll('textarea.autosize'));
      autosize(document.querySelectorAll('.dialogue-container textarea'));
    }).finally(() => {
      loadingEl.classList.add('hide');
      inputEl.disabled = false;
      buttonEl.disabled = false;
    });
  }

  const listeners = [
    {
        ev: 'readyAsync',
        fn: function() {
          waitForConstant('axios', () => {
            loadResultFromURL();
          })
        }
    },
    {
      el: 'window',
      ev: 'popstate', // user clicks browser back/forward buttons
      fn: function(event) {
        if (!event.state) {
          return;
        }
        console.log('[popstate] URL changed to', window.location.href, ' / state:', event.state);
        loadResultFromState(event.state);
      }
    },
    {
      el: '.dialogue-generate-input',
      ev: 'enter',
      fn: function(event, target) {
        generateResult();
      }
    },
    {
      el: '.npc-filter-input',
      ev: 'enter',
      fn: function(event, target) {
        generateResult();
      }
    },
    {
      el: '.dialogue-generate-submit',
      ev: 'click',
      fn: function(event, target) {
        generateResult();
      }
    },
  ];

  app.startListeners(listeners);
});
</script>
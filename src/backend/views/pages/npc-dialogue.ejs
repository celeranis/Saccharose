<div role="tabpanel">
  <section class="card">
    <h2>NPC Dialogue Generator</h2>
    <div class="content">
      <p class="spacer10-bottom">Generate dialogue for a specific NPC. You can also enter a specific NPC ID.</p>
      <div class="field valign">
        <div class="valign grow" style="max-width:700px">
          <input class="dialogue-generate-input grow" type="text" placeholder="Enter the exact name of an NPC (case insensitive)" style="border-top-right-radius:0;border-bottom-right-radius:0;" />
          <button class="dialogue-generate-submit primary primary--2 spacer5-left">Generate</button>
        </div>
        <div class="dialogue-generate-submit-pending hide loading small spacer5-left"></div>
      </div>
      <hr class="spacer10-top spacer10-bottom">
      <ul style="font-size:14.5px;line-height:20px;">
        <li>If you can't find the dialogue you're looking for, try entering part of the first line of the dialogue (if you have it) into the "Single Branch Dialogue Generator" tool.</li>
        <li>It may not find results if the NPC is disguised as "???"</li>
        <li>Try the other tools if you can't find the dialogue you're looking for.</li>
        <li>You may get multiple NPC results with different IDs but the same name. This is generally the same "person" but in the different conditions/situations/quest states. In other cases, it might actually be different people with the same name &mdash; there's an "Iris" in Dragonspine and an "Iris" in Sumeru, for example.</li>
      </ul>
    </div>
  </section>
  <div id="dialogue-generate-result"></div>
</div>

<script nonce="<%= req.context.nonce %>">
waitForConstant('app', app => {
  function loadResultFromURL() {
    const url = new URL(window.location.href);
    const query = url.searchParams.get('q');
    window.history.replaceState({q: query}, null, window.location.href);
    if (query) {
      document.querySelector('.dialogue-generate-input').value = query;
      generateResult(true);
    } else {
      document.querySelector('.dialogue-generate-input').value = '';
    }
  }

  function loadResultFromState(state) {
    if (!state)
      state = {};
    document.querySelector('.dialogue-generate-input').value = state.q || '';
    if (state.q) {
      generateResult(true);
    } else {
      document.querySelector('#dialogue-generate-result').innerHTML = '';
    }
  }

  function generateResult(isNonUserAction = false) {
    let inputEl = document.querySelector('.dialogue-generate-input');
    let loadingEl = document.querySelector('.dialogue-generate-submit-pending');
    let buttonEl = document.querySelector('.dialogue-generate-submit');
    let text = inputEl.value.trim();

    if (!text) {
      app.flashTippy(inputEl, {content: 'Enter something in first!', delay:[0,2000]});
      return;
    }

    loadingEl.classList.remove('hide');
    inputEl.disabled = true;
    buttonEl.disabled = true;

    const url = new URL(window.location.href);
    url.searchParams.set('q', text);
    if (isNonUserAction) {
      window.history.replaceState({q: text}, null, url.href);
    } else {
      window.history.pushState({q: text}, null, url.href);
    }

    app.endpoints.generateNpcDialogue(text, true).then(result => {
      if (typeof result === 'string') {
        document.querySelector('#dialogue-generate-result').innerHTML = result;
      } else if (typeof result === 'object' && result.error_description) {
        document.querySelector('#dialogue-generate-result').innerHTML = '<div class="card"><div class="content">'+esc(result.error_description)+'</div></div>';
      }
      autosize(document.querySelectorAll('textarea.autosize'));
      autosize(document.querySelectorAll('.dialogue-container textarea'));
    }).finally(() => {
      loadingEl.classList.add('hide');
      inputEl.disabled = false;
      buttonEl.disabled = false;
    });
  }

  const listeners = [
    {
        ev: 'readyAsync',
        fn: function() {
          // Replace state on load to populate state to distinguish hashchanges in popstate
          waitForConstant('axios', () => {
            loadResultFromURL();
          })
        }
    },
    {
      el: 'window',
      ev: 'popstate', // user clicks browser back/forward buttons
      fn: function(event) {
        if (!event.state) {
          return;
        }
        console.log('[popstate] URL changed to', window.location.href, ' / state:', event.state);
        loadResultFromState(event.state);
      }
    },
    {
      el: '.dialogue-generate-input',
      ev: 'enter',
      fn: function(event, target) {
        generateResult();
      }
    },
    {
      el: '.dialogue-generate-submit',
      ev: 'click',
      fn: function(event, target) {
        generateResult();
      }
    },
  ];

  app.startListeners(listeners);
});
</script>